#version 410
in vec4 EyePosition;
in vec3 TNormal;
in vec2 TexCoord;
in vec4 ShadowCoord[2];

in vec3 ambient;
in vec3 diffAndSpec;

uniform sampler2D Tex1;
uniform sampler2DShadow ShadowMaps[2];

uniform float TileSize;

layout( location = 0 ) out vec4 FragColor;

void main() {
     // The sum of the comparisons with nearby texels  
	 float sum = 0;

	for(int index = 0; index < 2; index++)
	{
		// Sum contributions from texels around ShadowCoord  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(-1,-1));  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(-1,1));  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(1,1));  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(1,-1));  
	}
	float shadow = sum * 0.25;
	//float shadow = textureProj(ShadowMaps[index], ShadowCoord);

	vec2 xy = TexCoord.xy;
	vec2 phase = fract(xy / TileSize);
	vec4 texColor = texture2D(Tex1 ,phase);

	//vec4 texColor = texture( Tex1, TexCoord );

    // If the fragment is in shadow, use ambient light only.  
	if(texColor != vec4(0.0))
		FragColor = vec4(diffAndSpec * shadow + ambient, 1.0) * texColor; 
	else
		FragColor = vec4(diffAndSpec * shadow + ambient, 1.0);
}