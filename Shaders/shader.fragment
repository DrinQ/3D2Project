#version 410
in vec4 WorldPosition;
in vec4 ViewPosition;
in vec3 TNormal;
in vec2 TexCoord;
in vec4 ShadowCoord[10];

uniform sampler2D Tex1;
uniform sampler2D BumpMap;
uniform sampler2D SpecMap;
uniform sampler2DShadow ShadowMaps[10];
uniform mat4 ViewMatrix;
uniform float TileSize;
uniform int nrOfLights;

layout( location = 0 ) out vec4 FragColor;

vec3 normal;

struct LightInfo{
	vec4 Position; // Light position world coords.
	vec3 Intensity; // La, Ld and Ls intensity
	vec3 Color;
	float Distance;
};
uniform LightInfo Lights[10];

struct MaterialInfo{
	vec3 Ka;			// Ambient reflectivity
	vec3 Kd;		    // Diffuse reflectivity
	vec3 Ks;			// Specular reflectivity
	float Shininess;	// Specular shininess factor
};
uniform MaterialInfo Material;

vec3 phongModelDiffAndSpec(int index, vec3 lightPos, float strength) {

		vec3 s = normalize(vec3(lightPos - ViewPosition));
		vec3 v = normalize(-ViewPosition.xyz);	
		//vec3 r = reflect( -s, normal );
		vec3 h = normalize(v + s);

		float sDotN = max( dot(s, normal), 0.0 );
	
		//Diffuse light
		vec3 diffuse = vec3(Lights[index].Intensity.y) * Lights[index].Color * Material.Kd * sDotN * strength;

		vec3 Ks = Material.Ks;

		//if(texture(SpecMap, TexCoord) != vec4(0.0))
		//{
		//	Ks = texture(SpecMap, TexCoord).xyz;
		//}

		vec3 specular = vec3(0.0);
	
		//Specular light
		if( sDotN > 0.0 )
			specular = vec3(Lights[index].Intensity.z) * Lights[index].Color * Ks * pow( max( dot(h,v), 0.0 ), Material.Shininess ) * strength;
		
		return vec3(diffuse + specular);
}

void main() {
	//if(texture(BumpMap, TexCoord) != vec4(0.0))
		//{
		//	vec4 norm = texture(BumpMap, TexCoord);
		//	normal.x = 2 * (norm.x - 0.5);
		//	normal.y = 2 * (norm.y - 0.5);
	//		normal.z = 2 * (norm.z - 0.5);
	//	}
	//	else
			normal = TNormal;

    vec3 lightAndShadowResult = vec3(0.0);
	vec3 ambient = vec3(Lights[0].Intensity.x) * Material.Ka;

	for(int index = 0; index < nrOfLights; index++)
	{
		// The sum of the comparisons with nearby texels  
		float sum = 0;

		// Sum contributions from texels around ShadowCoord  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(-1,-1));  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(-1,1));  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(1,1));  
		sum += textureProjOffset(ShadowMaps[index], ShadowCoord[index], ivec2(1,-1));  

		float shadow = sum * 0.25;

		vec3 diffAndSpec = vec3(0.0);
		vec4 LightViewPos = ViewMatrix * Lights[index].Position;

		float lightDist = abs(length(WorldPosition - Lights[index].Position));
		float lightStrength = 0;
		if( lightDist < Lights[index].Distance )
			lightStrength = 1.0-(lightDist / Lights[index].Distance);
		
		//för varje ljus
		diffAndSpec = phongModelDiffAndSpec(index, LightViewPos, lightStrength);

		lightAndShadowResult += diffAndSpec * shadow;
	}
	
	//float shadow = textureProj(ShadowMaps[index], ShadowCoord);

	vec2 xy = TexCoord.xy;
	vec2 phase = fract(xy / TileSize);
	vec4 texColor = texture2D(Tex1 ,phase);

	//vec4 texColor = texture( Tex1, TexCoord );

    // If the fragment is in shadow, use ambient light only.  
	if(texColor != vec4(0.0))
		FragColor = vec4(lightAndShadowResult + ambient, 1.0) * texColor; 
	else
		FragColor = vec4(lightAndShadowResult + ambient, 1.0);
}